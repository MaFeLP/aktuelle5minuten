/* tslint:disable */
/* eslint-disable */
/**
 * Aktuelle 5 Minuten
 * Aktuelle 5 Minuten API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Summary200Response,
} from '../models/index';
import {
    Summary200ResponseFromJSON,
    Summary200ResponseToJSON,
} from '../models/index';

export interface BulletsRequest {
    category: string;
    bullets: string;
}

export interface GetAllRequest {
    print: boolean;
}

export interface SummaryRequest {
    category?: string;
}

/**
 * 
 */
export class CategoryApi extends runtime.BaseAPI {

    /**
     * Uploads bullet points for the given category
     */
    async bulletsRaw(requestParameters: BulletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling bullets().'
            );
        }

        if (requestParameters['bullets'] == null) {
            throw new runtime.RequiredError(
                'bullets',
                'Required parameter "bullets" was null or undefined when calling bullets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['category'] != null) {
            formParams.append('category', requestParameters['category'] as any);
        }

        if (requestParameters['bullets'] != null) {
            formParams.append('bullets', requestParameters['bullets'] as any);
        }

        const response = await this.request({
            path: `/api/category/bullets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Uploads bullet points for the given category
     */
    async bullets(requestParameters: BulletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulletsRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a sorted list of all the categories that are available for autocompletion. This includes standard categories, as well as already used categories.
     * Gets all categories
     */
    async getAllRaw(requestParameters: GetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['print'] == null) {
            throw new runtime.RequiredError(
                'print',
                'Required parameter "print" was null or undefined when calling getAll().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['print'] != null) {
            queryParameters['print'] = requestParameters['print'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/category/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets a sorted list of all the categories that are available for autocompletion. This includes standard categories, as well as already used categories.
     * Gets all categories
     */
    async getAll(requestParameters: GetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all the articles\' titles and contents for further processing
     * Summarizes the articles in given category
     */
    async summaryRaw(requestParameters: SummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Summary200Response>> {
        const queryParameters: any = {};

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/category/summary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Summary200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all the articles\' titles and contents for further processing
     * Summarizes the articles in given category
     */
    async summary(requestParameters: SummaryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Summary200Response> {
        const response = await this.summaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
