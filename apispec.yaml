openapi: 3.0.3
info:
  title: "Aktuelle 5 Minuten"
  description: "Aktuelle 5 Minuten API"
  version: 1.0.0
  license:
    name: "GPLv3-OR-LATER"
    url: "https://www.gnu.org/licenses/gpl-3.0.html"

servers:
  - url: 'https://aktuelle5minuten.maxfehlinger.de'

tags:
  - name: "article"
    description: "Everything to manage articles"
  - name: "category"
    description: "Everything to manage categories"
  - name: "actions"
    description: "General purpose (database) actions"
  - name: "files"
    description: "Already created PDF files"
  - name: "status"
    description: "Retrieve Status about specific objects"

paths:
  # Article endpoints
  /api/article/get:
    get:
      tags: ["article"]
      description: "Retrieves a specific article from the database"
      operationId: "get"
      responses:
        200:
          description: "The requested article"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/article'
        404:
          description: "The requested article has not been found"
          content:
            text/plain:
              example: "Not Found"
        500:
          $ref: '#/components/responses/500'
      parameters:
        - $ref: '#/components/parameters/key'
  /api/article/get/first:
    get:
      tags: ["article"]
      description: "Gets the first article in the database"
      operationId: "getFirst"
      parameters:
        - $ref: '#/components/parameters/date'
      responses:
        200:
          description: "There exists a first article and it is returned in the body"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/article'
        404:
          description: >-
            No more articles left that have no category and status assigned.

            You can call `/api/actions/load` to load more articles (or wait some time, if no more articles have been written).
          content:
            text/plain:
              example: "No articles found"
  /api/article/dates:
    get:
      tags: ["article"]
      description: "Gets all dates that have uncategorized articles"
      operationId: "getDates"
      responses:
        200:
          description: "The available dates with uncategorized articles"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/article/promote:
    get:
      tags: ["article"]
      description: "Sets the article's status to be included in the PDF"
      operationId: "promote"
      parameters:
        - $ref: '#/components/parameters/category'
        - $ref: '#/components/parameters/key'
      responses:
        201:
          description: "The article was promoted successfully"
          content:
            text/plain:
              example: "Ok"
        400:
          description: "The category name is too long. A maximum of 63 characters is allowed. This error is also raised if not all required query parameters are present."
          content:
            text/plain:
              example: "Category too long. Maximum of 63 characters allowed"
        500:
          $ref: '#/components/responses/500'
  /api/article/demote:
    get:
      tags: ["article"]
      description: "Sets the article's status to be **not** included in the PDF"
      operationId: "demote"
      parameters:
        - $ref: '#/components/parameters/key'
      responses:
        201:
          description: "The article was demoted successfully"
          content:
            text/plain:
              example: "Ok"
        400:
          description: "The requested key is not present in the query"
        500:
          $ref: '#/components/responses/500'

  # Category endpoints
  /api/category/all:
    get:
      tags: ["category"]
      description: "Gets a sorted list of all the categories that are available for autocompletion. This includes standard categories, as well as already used categories."
      operationId: "getAll"
      summary: "Gets all categories"
      parameters:
        - name: "print"
          description: "If set to true, only categories that have articles associated with them will be returned. Otherwise standard categories will also be included."
          required: true
          allowEmptyValue: false
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: "The categories"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/category/summary:
    get:
      tags: ["category"]
      description: "Returns all the articles' titles and contents for further processing"
      summary: "Summarizes the articles in given category"
      operationId: "summary"
      parameters:
        - $ref: '#/components/parameters/category'
      responses:
        200:
          description: "The articles in the category"
          content:
            application/json:
              schema:
                type: object
                required: ["category", "text"]
                properties:
                  category:
                    type: string
                    description: "The requested category"
                  text:
                    type: string
                    description: "The text to display to the user"
        400:
          description: "Category could not be found"
        500:
          $ref: '#/components/responses/500'
  /api/category/bullets:
    post:
      tags: ["category"]
      description: "Uploads bullet points for the given category"
      operationId: "bullets"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: ["category", "bullets"]
              properties:
                category:
                  type: string
                bullets:
                  type: string
      responses:
        302:
          description: "The bullets have been accepted and the client is redirected either back to the bullet points creation page or the final PDF document, after it has been created."
        406:
          description: "The form is not completely filled out."
          content:
            text/plain:
              example: "Category or Bullets missing"
        500:
          description: "Internal server error. One of the bullet points probably hold invalid characters (e.g. `#`). Manual database editing is currently required to fix this error."

  # Database actions
  /api/actions/clean:
    get:
      tags: ["actions"]
      summary: "Cleans the database entries"
      description: "Clean the database entries that are older than a certain time"
      operationId: "clean"
      responses:
        200:
          description: "Database was cleared successful"
          content:
            text/plain:
              example: "Database cleared"
        500:
          $ref: '#/components/responses/500'
  /api/actions/load:
    get:
      tags: ["actions"]
      summary: "Load articles"
      description: "Retrieves all articles from Deutschlandfunk's Wochenr√ºckblick and stores them in the database."
      operationId: "load"
      responses:
        201:
          description: "All articles loaded successfully"
          content:
            text/plain:
              example: "Created"
        500:
          $ref: '#/components/responses/500'

  # Files endpoints
  /api/files:
    get:
      tags: ["files"]
      description: "Get a list of all the already created files"
      operationId: "list"
      responses:
        200:
          description: "The list of created files"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        500:
          $ref: '#/components/responses/500'
  /files/{path}:
    get:
      tags: ["files"]
      description: "Returns the requested PDF file"
      operationId: "file"
      parameters:
        - name: "path"
          description: "The name of the PDF file to request"
          required: true
          allowEmptyValue: false
          example: "2024-02-28_23:55:10.pdf"
          in: path
          schema:
            type: string
      responses:
        200:
          description: "The requested PDF file"
        404:
          description: "The requested PDF file has not been found"
        500:
          $ref: '#/components/responses/500'

  # Status actions
  /api/ai:
    get:
      tags: ["status"]
      summary: "Status for enabled AI buttons"
      description: "Retrieves the status, if specific AI buttons should be enabled"
      operationId: "ai"
      responses:
        200:
          description: "The status for the AI buttons"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aiStatus'
        500:
          $ref: '#/components/responses/500'
  /api/count:
    get:
      tags: ["status"]
      summary: "How many articles/categories exist"
      description: "How many articles/categories exist in the database"
      operationId: "count"
      parameters:
        - $ref: '#/components/parameters/date'
      responses:
        200:
          description: "How many articles/categories exist in the database"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/count'
        500:
          $ref: '#/components/responses/500'

components:
  schemas:
    aiStatus:
      description: "Controls if certain buttons should be shown to the user in the UI"
      type: object
      required: ["chatgpt", "claude"]
      properties:
        chatgpt:
          description: "If a ChatGPT link button should be shown"
          type: boolean
        claude:
          description: "If a Claude-AI link button should be shown"
          type: boolean
    article:
      description: "The article object"
      type: object
      required: ["kicker", "title", "description", "content", "figures", "key", "date", "localeDate"]
      properties:
        kicker:
          type: string
        title:
          type: string
        description:
          type: string
        content:
          type: object
          required: ["html", "plaintext"]
          properties:
            html:
              type: string
            plaintext:
              type: string
        figures:
          type: array
          items:
            type: object
            required: ["image", "caption"]
            properties:
              image:
                type: object
                required: ["src", "alt", "srcset", "title"]
                properties:
                  src:
                    type: string
                  alt:
                    type: string
                  srcset:
                    type: string
                  title:
                    type: string
              caption:
                type: string
        key:
          type: string
        date:
          type: string
        localeDate:
          type: string
    count:
      description: "Status about how many articles/categories exist in the database"
      type: object
      required: ["articles", "categories"]
      properties:
        articles:
          type: integer
        categories:
          type: integer

  parameters:
    key:
      name: "key"
      description: "The article id/key to get the complete information about"
      allowEmptyValue: false
      example: "drei-schiffe-aus-zypern-mit-hilfsguetern-auf-dem-weg-nach-gaza-100.html"
      in: query
      schema:
        type: string
    category:
      name: "category"
      description: "The category under which the article should be included"
      allowEmptyValue: false
      example: "Innenpolitik"
      in: query
      schema:
        type: string
    date:
      name: articleDate
      description: "The date from which the article should be (in ISO format)"
      allowEmptyValue: true
      schema:
        type: string
      required: false
      example: 2024-02-28
      in: query

  responses:
    '500':
      description: "Internal server error occurred. This is a bug."
